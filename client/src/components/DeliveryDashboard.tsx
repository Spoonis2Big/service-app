import React, { useState, useEffect } from 'react';
import { Plus, Search, Truck, Package, Calendar, Camera, Upload, X } from 'lucide-react';
import { ServiceOrder, serviceOrderAPI } from '../services/api';

const DeliveryDashboard: React.FC = () => {
  const [orders, setOrders] = useState<ServiceOrder[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'new' | 'existing'>('new');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedOrder, setSelectedOrder] = useState<ServiceOrder | null>(null);

  // New order form state
  const [newOrderData, setNewOrderData] = useState({
    customer_name: '',
    phone_number: '',
    product: '',
    issues: '',
    date: new Date().toISOString().split('T')[0]
  });
  
  // Picture handling state
  const [selectedFiles, setSelectedFiles] = useState<FileList | null>(null);
  const [previewUrls, setPreviewUrls] = useState<string[]>([]);
  const [uploadingPictures, setUploadingPictures] = useState(false);

  useEffect(() => {
    fetchOrders();
  }, []);

  const fetchOrders = async () => {
    try {
      setLoading(true);
      const data = await serviceOrderAPI.getAll();
      setOrders(data);
    } catch (err) {
      setError('Failed to fetch service orders');
      console.error('Error fetching orders:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleCreateNewOrder = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const orderData: Omit<ServiceOrder, 'id'> = {
        ...newOrderData,
        service_order_number: '', // Will be auto-generated by backend
      };
      
      const response = await serviceOrderAPI.create(orderData);
      
      // Upload pictures if any were selected
      if (selectedFiles && selectedFiles.length > 0) {
        try {
          await serviceOrderAPI.uploadPictures(response.id, selectedFiles);
        } catch (pictureError) {
          console.error('Failed to upload pictures:', pictureError);
          alert('Order created successfully, but failed to upload pictures. You can add them later.');
        }
      }
      
      // Reset form
      setNewOrderData({
        customer_name: '',
        phone_number: '',
        product: '',
        issues: '',
        date: new Date().toISOString().split('T')[0]
      });
      
      // Clear picture state
      setSelectedFiles(null);
      previewUrls.forEach(url => URL.revokeObjectURL(url));
      setPreviewUrls([]);
      
      // Refresh orders list
      await fetchOrders();
      
      alert(`New service order created successfully! Order #: ${response.service_order_number}`);
    } catch (err) {
      console.error('Create order error:', err);
      alert('Failed to create service order');
    }
  };

  const handleSelectExistingOrder = (order: ServiceOrder) => {
    setSelectedOrder(order);
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files) {
      setSelectedFiles(files);
      
      // Create preview URLs
      const urls: string[] = [];
      Array.from(files).forEach(file => {
        urls.push(URL.createObjectURL(file));
      });
      setPreviewUrls(urls);
    }
  };

  const handleRemoveFile = (index: number) => {
    if (selectedFiles) {
      const newFiles = Array.from(selectedFiles);
      newFiles.splice(index, 1);
      
      // Create new FileList
      const dt = new DataTransfer();
      newFiles.forEach(file => dt.items.add(file));
      setSelectedFiles(dt.files);
      
      // Update preview URLs
      const newUrls = [...previewUrls];
      URL.revokeObjectURL(newUrls[index]);
      newUrls.splice(index, 1);
      setPreviewUrls(newUrls);
    }
  };

  const handleUploadPictures = async (orderId: number) => {
    if (!selectedFiles || selectedFiles.length === 0) return;
    
    try {
      setUploadingPictures(true);
      await serviceOrderAPI.uploadPictures(orderId, selectedFiles);
      
      // Clear selected files and previews
      setSelectedFiles(null);
      previewUrls.forEach(url => URL.revokeObjectURL(url));
      setPreviewUrls([]);
      
      // Refresh orders to show updated pictures
      await fetchOrders();
      
      alert('Pictures uploaded successfully!');
    } catch (err) {
      alert('Failed to upload pictures');
      console.error('Picture upload error:', err);
    } finally {
      setUploadingPictures(false);
    }
  };

  const filteredOrders = orders.filter(order =>
    order.service_order_number.toLowerCase().includes(searchTerm.toLowerCase()) ||
    order.customer_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    order.product?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const getStatusColor = (status?: string) => {
    switch (status) {
      case 'open': return 'status-open';
      case 'in_progress': return 'status-progress';  
      case 'completed': return 'status-completed';
      case 'closed': return 'status-closed';
      default: return 'status-open';
    }
  };

  if (loading) {
    return <div className="loading-spinner">Loading delivery dashboard...</div>;
  }

  if (error) {
    return <div className="error-message">{error}</div>;
  }

  return (
    <div className="delivery-dashboard">
      <div className="delivery-header">
        <h2>Delivery Dashboard</h2>
        <p>Manage deliveries and pickups for service orders</p>
      </div>

      {/* Tab Navigation */}
      <div className="tab-navigation">
        <button
          className={`tab ${activeTab === 'new' ? 'tab-active' : ''}`}
          onClick={() => setActiveTab('new')}
        >
          <Plus size={20} />
          Enter New Order
        </button>
        <button
          className={`tab ${activeTab === 'existing' ? 'tab-active' : ''}`}
          onClick={() => setActiveTab('existing')}
        >
          <Package size={20} />
          Choose Existing Order
        </button>
      </div>

      {/* Tab Content */}
      <div className="tab-content">
        {activeTab === 'new' && (
          <div className="new-order-section">
            <div className="section-header">
              <h3>Create New Service Order</h3>
              <p>Enter details for a new pickup or delivery order</p>
            </div>

            <form onSubmit={handleCreateNewOrder} className="delivery-form">
              <div className="form-grid">
                <div className="form-group">
                  <label>Customer Name *</label>
                  <input
                    type="text"
                    value={newOrderData.customer_name}
                    onChange={(e) => setNewOrderData({...newOrderData, customer_name: e.target.value})}
                    required
                    placeholder="Enter customer name"
                  />
                </div>

                <div className="form-group">
                  <label>Phone Number</label>
                  <input
                    type="tel"
                    value={newOrderData.phone_number}
                    onChange={(e) => setNewOrderData({...newOrderData, phone_number: e.target.value})}
                    placeholder="Customer phone number"
                  />
                </div>

                <div className="form-group">
                  <label>Product/Item</label>
                  <input
                    type="text"
                    value={newOrderData.product}
                    onChange={(e) => setNewOrderData({...newOrderData, product: e.target.value})}
                    placeholder="Product or item description"
                  />
                </div>

                <div className="form-group">
                  <label>Service Date *</label>
                  <input
                    type="date"
                    value={newOrderData.date}
                    onChange={(e) => setNewOrderData({...newOrderData, date: e.target.value})}
                    required
                  />
                </div>
              </div>

              <div className="form-group full-width">
                <label>Issues/Description</label>
                <textarea
                  value={newOrderData.issues}
                  onChange={(e) => setNewOrderData({...newOrderData, issues: e.target.value})}
                  placeholder="Describe the issues or service requirements"
                  rows={4}
                />
              </div>

              {/* Picture Upload Section */}
              <div className="form-group full-width">
                <label>Pictures (Optional)</label>
                <div className="picture-upload-section">
                  <input
                    type="file"
                    accept="image/*"
                    multiple
                    onChange={handleFileSelect}
                    style={{ display: 'none' }}
                    id="picture-upload"
                  />
                  <label htmlFor="picture-upload" className="btn btn-secondary">
                    <Camera size={20} />
                    Select Pictures
                  </label>
                  
                  {previewUrls.length > 0 && (
                    <div className="picture-previews">
                      <h4>Selected Pictures:</h4>
                      <div className="preview-grid">
                        {previewUrls.map((url, index) => (
                          <div key={index} className="preview-item">
                            <img src={url} alt={`Preview ${index + 1}`} />
                            <button
                              type="button"
                              onClick={() => handleRemoveFile(index)}
                              className="remove-btn"
                            >
                              <X size={16} />
                            </button>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>

              <div className="form-actions">
                <button type="submit" className="btn btn-primary btn-large">
                  <Plus size={20} />
                  Create Service Order
                </button>
              </div>
            </form>
          </div>
        )}

        {activeTab === 'existing' && (
          <div className="existing-orders-section">
            <div className="section-header">
              <h3>Select Existing Order</h3>
              <p>Choose an existing service order for delivery or pickup</p>
            </div>

            {/* Search */}
            <div className="search-container">
              <Search size={20} />
              <input
                type="text"
                placeholder="Search by order number, customer, or product..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="search-input"
              />
            </div>

            {/* Orders List */}
            <div className="orders-list">
              {filteredOrders.map((order) => (
                <div 
                  key={order.id} 
                  className={`order-item ${selectedOrder?.id === order.id ? 'order-selected' : ''}`}
                  onClick={() => handleSelectExistingOrder(order)}
                >
                  <div className="order-main-info">
                    <div className="order-header">
                      <span className="order-number">
                        {order.service_order_number}
                      </span>
                      <span className={`order-status ${getStatusColor(order.status)}`}>
                        {order.status?.replace('_', ' ')}
                      </span>
                    </div>
                    
                    <h4>{order.customer_name}</h4>
                    <p className="order-product">{order.product}</p>
                    
                    <div className="order-meta">
                      <span className="order-date">
                        <Calendar size={16} />
                        {new Date(order.date).toLocaleDateString()}
                      </span>
                      {order.phone_number && (
                        <span className="order-phone">
                          📞 {order.phone_number}
                        </span>
                      )}
                      {order.pictures && order.pictures.length > 0 && (
                        <span className="order-pictures">
                          <Camera size={16} />
                          {order.pictures.length} photo(s)
                        </span>
                      )}
                    </div>
                  </div>

                  <div className="order-delivery-info">
                    <div className="delivery-status">
                      {order.piece_picked_date ? (
                        <div className="status-item status-picked">
                          <Truck size={16} />
                          <span>Picked: {new Date(order.piece_picked_date).toLocaleDateString()}</span>
                        </div>
                      ) : (
                        <div className="status-item status-pending">
                          <Package size={16} />
                          <span>Pickup Pending</span>
                        </div>
                      )}
                      
                      {order.piece_return_date ? (
                        <div className="status-item status-returned">
                          <Truck size={16} />
                          <span>Returned: {new Date(order.piece_return_date).toLocaleDateString()}</span>
                        </div>
                      ) : order.piece_picked_date && (
                        <div className="status-item status-pending">
                          <Package size={16} />
                          <span>Return Pending</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {filteredOrders.length === 0 && (
              <div className="empty-state">
                <Package size={48} />
                <h3>No orders found</h3>
                <p>Try adjusting your search terms</p>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Selected Order Details */}
      {selectedOrder && (
        <div className="selected-order-details">
          <div className="details-header">
            <h3>Selected Order: {selectedOrder.service_order_number}</h3>
            <button onClick={() => setSelectedOrder(null)} className="btn btn-secondary">
              Clear Selection
            </button>
          </div>
          
          <div className="details-content">
            <div className="details-grid">
              <div className="detail-item">
                <label>Customer</label>
                <span>{selectedOrder.customer_name}</span>
              </div>
              <div className="detail-item">
                <label>Phone</label>
                <span>{selectedOrder.phone_number || 'N/A'}</span>
              </div>
              <div className="detail-item">
                <label>Product</label>
                <span>{selectedOrder.product || 'N/A'}</span>
              </div>
              <div className="detail-item">
                <label>Status</label>
                <span className={`status ${getStatusColor(selectedOrder.status)}`}>
                  {selectedOrder.status?.replace('_', ' ')}
                </span>
              </div>
            </div>
            
            {selectedOrder.issues && (
              <div className="detail-item full-width">
                <label>Issues</label>
                <p>{selectedOrder.issues}</p>
              </div>
            )}
            
            {/* Pictures Section */}
            <div className="pictures-section">
              <div className="pictures-header">
                <h4>Pictures ({selectedOrder.pictures?.length || 0})</h4>
                <div className="picture-actions">
                  <input
                    type="file"
                    accept="image/*"
                    multiple
                    onChange={handleFileSelect}
                    style={{ display: 'none' }}
                    id="add-pictures"
                  />
                  <label htmlFor="add-pictures" className="btn btn-secondary btn-sm">
                    <Camera size={16} />
                    Add Pictures
                  </label>
                  {selectedFiles && selectedFiles.length > 0 && (
                    <button
                      onClick={() => handleUploadPictures(selectedOrder.id!)}
                      disabled={uploadingPictures}
                      className="btn btn-primary btn-sm"
                    >
                      <Upload size={16} />
                      {uploadingPictures ? 'Uploading...' : `Upload ${selectedFiles.length} file(s)`}
                    </button>
                  )}
                </div>
              </div>
              
              {/* Existing Pictures */}
              {selectedOrder.pictures && selectedOrder.pictures.length > 0 && (
                <div className="existing-pictures">
                  <div className="pictures-grid">
                    {selectedOrder.pictures.map((picturePath, index) => (
                      <div key={index} className="picture-item">
                        <img 
                          src={`http://localhost:3001${picturePath}`} 
                          alt={`Service order ${index + 1}`}
                          onError={(e) => {
                            const target = e.target as HTMLImageElement;
                            target.style.display = 'none';
                          }}
                        />
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Preview New Pictures */}
              {previewUrls.length > 0 && (
                <div className="picture-previews">
                  <h5>New Pictures to Upload:</h5>
                  <div className="preview-grid">
                    {previewUrls.map((url, index) => (
                      <div key={index} className="preview-item">
                        <img src={url} alt={`Preview ${index + 1}`} />
                        <button
                          onClick={() => handleRemoveFile(index)}
                          className="remove-btn"
                        >
                          <X size={16} />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {!selectedOrder.pictures?.length && previewUrls.length === 0 && (
                <div className="no-pictures">
                  <Camera size={32} />
                  <p>No pictures available. Add some pictures to document the service.</p>
                </div>
              )}
            </div>
            
            <div className="delivery-actions">
              <button className="btn btn-primary">
                <Truck size={16} />
                Schedule Pickup
              </button>
              <button className="btn btn-secondary">
                <Package size={16} />
                Schedule Delivery
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DeliveryDashboard;